var documenterSearchIndex = {"docs":
[{"location":"#LAMPS-Teaching-1","page":"Home","title":"LAMPS Teaching","text":"","category":"section"},{"location":"julia/julia/#Julia-1","page":"Julia","title":"Julia","text":"","category":"section"},{"location":"julia/julia/#","page":"Julia","title":"Julia","text":"Julia Documentation","category":"page"},{"location":"julia/julia/#","page":"Julia","title":"Julia","text":"Useful links: ","category":"page"},{"location":"julia/julia/#","page":"Julia","title":"Julia","text":"Julia Learning\nJulia no youtube\nProgramação em Julia","category":"page"},{"location":"julia/julia/#Installation-1","page":"Julia","title":"Installation","text":"","category":"section"},{"location":"julia/julia/#","page":"Julia","title":"Julia","text":"To install Julia just follow the steps on this link","category":"page"},{"location":"julia/julia/#","page":"Julia","title":"Julia","text":"We recommend downloading version 1.0.3 (Long-term support release)","category":"page"},{"location":"julia/julia/#IDEs-1","page":"Julia","title":"IDEs","text":"","category":"section"},{"location":"julia/julia/#","page":"Julia","title":"Julia","text":"Once Julia is installed on your computer you will need an Integrated Development Environment (IDE) to unpack your code. The most common ones are:","category":"page"},{"location":"julia/julia/#","page":"Julia","title":"Julia","text":"Atom\nVscode","category":"page"},{"location":"julia/julia/#","page":"Julia","title":"Julia","text":"Choose one and stay with it until you feel loose to create projects and run the codes.","category":"page"},{"location":"julia/julia/#Help-1","page":"Julia","title":"Help","text":"","category":"section"},{"location":"julia/julia/#","page":"Julia","title":"Julia","text":"A helpful shortcut to understanding the use of a function is the terminal help. Imagine that for your application you need the findmin function but do not know how to use it. When typing ? into a  Julia terminal, it should become a Julia help terminal. Now we can enter the name of the function to understand its use","category":"page"},{"location":"julia/julia/#","page":"Julia","title":"Julia","text":"help?> findmin\n\nsearch: findmin findmin! findmax findmax!\n\n  findmin(itr) -> (x, index)\n\n  Return the minimum element of the collection itr and its index. If there are\n  multiple minimal elements, then the first one will be returned. If any data\n  element is NaN, this element is returned. The result is in line with min.\n\n  The collection must not be empty.\n\n  Examples\n  ≡≡≡≡≡≡≡≡≡≡\n\n  Julia> findmin([8,0.1,-9,pi])\n  (-9.0, 3)\n  \n  Julia> findmin([7,1,1,6])\n  (1, 2)\n  \n  Julia> findmin([7,1,1,NaN])\n  (NaN, 4)\n\n  ────────────────────────────────────────────────────────────────────────────\n\n  findmin(A; dims) -> (minval, index)\n\n  For an array input, returns the value and index of the minimum over the\n  given dimensions. NaN is treated as less than all other values.\n\n  Examples\n  ≡≡≡≡≡≡≡≡≡≡\n\n  Julia> A = [1.0 2; 3 4]\n  2×2 Array{Float64,2}:\n   1.0  2.0\n   3.0  4.0\n  \n  Julia> findmin(A, dims=1)\n  ([1.0 2.0], CartesianIndex{2}[CartesianIndex(1, 1) CartesianIndex(1, 2)])\n  \n  Julia> findmin(A, dims=2)\n  ([1.0; 3.0], CartesianIndex{2}[CartesianIndex(1, 1); CartesianIndex(2, 1)])","category":"page"},{"location":"julia/julia/#Functions-1","page":"Julia","title":"Functions","text":"","category":"section"},{"location":"julia/julia/#Types-1","page":"Julia","title":"Types","text":"","category":"section"},{"location":"julia/julia/#","page":"Julia","title":"Julia","text":"To perform type modeling within the modules it is necessary to have a data structure in mind, which is not obvious. Regardless of the chosen data structure, we should use abstract and composite types. As an example of a data structure to exemplify modeling let us model geometric shapes. As there are many geometric shapes we could say that geometric shapes are in some way an abstract concept, which fits perfectly in the modelization by an abstract type.","category":"page"},{"location":"julia/julia/#","page":"Julia","title":"Julia","text":"abstract type GeometricShape end","category":"page"},{"location":"julia/julia/#","page":"Julia","title":"Julia","text":"Although there are lots of geometric shapes we see rectangles and triangles that can be concretely modeled every day. To do the modeling of rectangles we need to know what are the specifications of the rectangles, we consider height and width and its area formula as a string. Our composite type is:","category":"page"},{"location":"julia/julia/#","page":"Julia","title":"Julia","text":"mutable struct Rectangle <: GeometricShape\n    formula::String\n    base::Float64\n    height::Float64\nend","category":"page"},{"location":"julia/julia/#","page":"Julia","title":"Julia","text":"Analogously the triangles are defined by the base, the height, and the formula","category":"page"},{"location":"julia/julia/#","page":"Julia","title":"Julia","text":"mutable struct Triangle <: GeometricShape\n    formula::String\n    base::Float64\n    height::Float64\nend","category":"page"},{"location":"julia/julia/#","page":"Julia","title":"Julia","text":"When declaring a type automatically a constructor is created, that is, a function was created to construct a rectangle and a triangle, stating simply","category":"page"},{"location":"julia/julia/#","page":"Julia","title":"Julia","text":"rect = Rectangle(\"base*height\", 1.0, 2.0)\ntriang = Triangle(\"(base*height)/2\", 1.0, 2.0)","category":"page"},{"location":"julia/julia/#","page":"Julia","title":"Julia","text":"Since the formula for calculating the area of ​​a figure never changes we could create a new constructor which, upon receiving the base and height parameters, automatically fills the formula for both triangles and rectangles","category":"page"},{"location":"julia/julia/#","page":"Julia","title":"Julia","text":"function Rectangle(base::Float64, height::Float64)\n    Rectangle(\"base*height\", base, height)\nend\n\nfunction Triangle(base::Float64, height::Float64)\n    Triangle(\"(base*height)/2\", base, height)\nend","category":"page"},{"location":"julia/julia/#","page":"Julia","title":"Julia","text":"Now we can build this geometric shapes only providing base and height","category":"page"},{"location":"julia/julia/#","page":"Julia","title":"Julia","text":"rect = Rectangle(1.0, 2.0)\ntriang = Triangle(1.0, 2.0)","category":"page"},{"location":"julia/julia/#","page":"Julia","title":"Julia","text":"For more information Types e Constructors","category":"page"},{"location":"julia/julia/#Modules-1","page":"Julia","title":"Modules","text":"","category":"section"},{"location":"julia/julia/#","page":"Julia","title":"Julia","text":"Now imagine that there is a module that deals only with rectangles, let's assume that this module has only one function calculate the area of ​​the geometric figure. A module can have many variants but follows a basic structure.","category":"page"},{"location":"julia/julia/#","page":"Julia","title":"Julia","text":"module Rect\n\nexport Rectangle, area  # Functions that users can access when running `using Rect`\n\nmutable struct Rectangle\n    formula::String\n    base::Float64\n    height::Float64\nend\n\n\"\"\"\n    Rectangle(base::Float64, height::Float64)\n\nConstructor of the Rectangle type\n\"\"\"\nfunction Rectangle(base::Float64, height::Float64)\n    Rectangle(\"base*height\", base, height)\nend\n\n\"\"\"\n    area(rectangle::Rectangle)\n\nCalculates the area of ​​a `Rectangle`\n\"\"\"\nfunction area(rectangle::Rectangle)\n    return (rectangle.base)*(rectangle.height)\nend\n\nend # end module","category":"page"},{"location":"julia/julia/#","page":"Julia","title":"Julia","text":"Another one for triangles","category":"page"},{"location":"julia/julia/#","page":"Julia","title":"Julia","text":"module Triang\n\nexport Triangle, area   # Functions that users can access when running `using Triang`\n\nmutable struct Triangle\n    formula::String\n    base::Float64\n    height::Float64\nend\n\n\"\"\"\n    Triangle(base::Float64, height::Float64)\n\nConstructor of the Triangle type\n\"\"\"\nfunction Triangle(base::Float64, height::Float64)\n    Triangle(\"(base*height)/2\", base, height)\nend\n\n\"\"\"\n    area(triangle::Triangle)\n\nCalculates the area of ​​a `Triangle`\n\"\"\"\nfunction area(triangle::Triangle)\n    return (triangle.base)*(triangle.height)/2\nend\n\nend # end module","category":"page"},{"location":"julia/julia/#","page":"Julia","title":"Julia","text":"TODO teach how to use the module that was built","category":"page"},{"location":"julia/julia/#","page":"Julia","title":"Julia","text":"For more information Modules -  Example","category":"page"},{"location":"julia/julia/#Test-1","page":"Julia","title":"Test","text":"","category":"section"},{"location":"julia/julia/#","page":"Julia","title":"Julia","text":"Julia has a specific library for unit testing, here are some quick examples of using the library. We will use the packages already used as examples Rectand Triang. let's say that as a unit test of the module we would like to check if the areas are being calculated correctly. In this case, we have a great advantage, the areas are super easy to calculate analytically! ","category":"page"},{"location":"julia/julia/#","page":"Julia","title":"Julia","text":"using Test, Triang, Rect\n\nrect = Rectangle(1.0, 2.0)\ntriang = Triangle(1.0, 2.0)\n\narea(rect)    # area = 2\narea(triang)  # area = 1","category":"page"},{"location":"julia/julia/#","page":"Julia","title":"Julia","text":"To test the code we can use the  test` macro in the same file by adding","category":"page"},{"location":"julia/julia/#","page":"Julia","title":"Julia","text":"@test area(rect) == 2\n@test area(triang) == 1","category":"page"},{"location":"julia/julia/#","page":"Julia","title":"Julia","text":"Another way to do the tests would be to group them into a  testset`","category":"page"},{"location":"julia/julia/#","page":"Julia","title":"Julia","text":"@testset \"Áreas de Figuras Geométricas\" begin\n    @test area(rect) == 2\n    @test area(triang) == 1\nend","category":"page"},{"location":"julia/julia/#","page":"Julia","title":"Julia","text":"The advantage of doing tests with  testset` is that at the end of the tests the macro shows a summary of the tests in the console","category":"page"},{"location":"julia/julia/#","page":"Julia","title":"Julia","text":"Test Summary:                | Pass  Total\nÁreas de Figuras Geométricas |    2      2","category":"page"},{"location":"julia/julia/#","page":"Julia","title":"Julia","text":"For more information Unit Testing","category":"page"},{"location":"julia/jupyternotebook/#Jupyter-Notebook-(Accessing-class-materials)-1","page":"Jupyter Notebook (Accessing class materials)","title":"Jupyter Notebook (Accessing class materials)","text":"","category":"section"},{"location":"julia/jupyternotebook/#","page":"Jupyter Notebook (Accessing class materials)","title":"Jupyter Notebook (Accessing class materials)","text":"All class materials are available via jupyter notebooks. Here we provide a simple guide to accessing them.","category":"page"},{"location":"julia/jupyternotebook/#Install-Julia-1","page":"Jupyter Notebook (Accessing class materials)","title":"Install Julia","text":"","category":"section"},{"location":"julia/jupyternotebook/#","page":"Jupyter Notebook (Accessing class materials)","title":"Jupyter Notebook (Accessing class materials)","text":"To get started, you first need to install Julia (if you haven't already).","category":"page"},{"location":"julia/jupyternotebook/#","page":"Jupyter Notebook (Accessing class materials)","title":"Jupyter Notebook (Accessing class materials)","text":"Download and install Julia v1.0.3 from https://julialang.org/downloads/.","category":"page"},{"location":"julia/jupyternotebook/#Download-the-materials-1","page":"Jupyter Notebook (Accessing class materials)","title":"Download the materials","text":"","category":"section"},{"location":"julia/jupyternotebook/#","page":"Jupyter Notebook (Accessing class materials)","title":"Jupyter Notebook (Accessing class materials)","text":"To get the class materials download this zip file and uncompress it to a folder of your choice. This will create a sub-folder Teaching.jl-master with all the materials.","category":"page"},{"location":"julia/jupyternotebook/#Open-Julia-1","page":"Jupyter Notebook (Accessing class materials)","title":"Open Julia","text":"","category":"section"},{"location":"julia/jupyternotebook/#","page":"Jupyter Notebook (Accessing class materials)","title":"Jupyter Notebook (Accessing class materials)","text":"Now open Julia by clicking on the Julia icon you installed. Once open, you should be faced with the Julia REPL (Julia's interactive command prompt) that looks like this:","category":"page"},{"location":"julia/jupyternotebook/#","page":"Jupyter Notebook (Accessing class materials)","title":"Jupyter Notebook (Accessing class materials)","text":"(Image: Julia REPL)","category":"page"},{"location":"julia/jupyternotebook/#Install-Jupyter-1","page":"Jupyter Notebook (Accessing class materials)","title":"Install Jupyter","text":"","category":"section"},{"location":"julia/jupyternotebook/#","page":"Jupyter Notebook (Accessing class materials)","title":"Jupyter Notebook (Accessing class materials)","text":"Now we need to install Jupyter. In the Julia REPL, run the following commands (this may take a little bit of time):","category":"page"},{"location":"julia/jupyternotebook/#","page":"Jupyter Notebook (Accessing class materials)","title":"Jupyter Notebook (Accessing class materials)","text":"import Pkg\nENV[\"JUPYTER\"]=\"\"\nPkg.add(\"Conda\")\nPkg.add(\"IJulia\")\nimport Conda\nConda.add(\"jupyter\")","category":"page"},{"location":"julia/jupyternotebook/#Open-a-Jupyter-notebook-1","page":"Jupyter Notebook (Accessing class materials)","title":"Open a Jupyter notebook","text":"","category":"section"},{"location":"julia/jupyternotebook/#","page":"Jupyter Notebook (Accessing class materials)","title":"Jupyter Notebook (Accessing class materials)","text":"Okay, last step, let's launch a Jupyter notebook! Open a Julia REPL and then run:","category":"page"},{"location":"julia/jupyternotebook/#","page":"Jupyter Notebook (Accessing class materials)","title":"Jupyter Notebook (Accessing class materials)","text":"using IJulia\nIJulia.notebook()","category":"page"},{"location":"julia/jupyternotebook/#","page":"Jupyter Notebook (Accessing class materials)","title":"Jupyter Notebook (Accessing class materials)","text":"If all goes well, a browser window will open that looks like this:","category":"page"},{"location":"julia/jupyternotebook/#","page":"Jupyter Notebook (Accessing class materials)","title":"Jupyter Notebook (Accessing class materials)","text":"(Image: jupyer_notebook)","category":"page"},{"location":"julia/jupyternotebook/#","page":"Jupyter Notebook (Accessing class materials)","title":"Jupyter Notebook (Accessing class materials)","text":"You can then navigate to the location of where you uncompressed the Teaching.jl-master repository folder and navigate to the class of your choice","category":"page"},{"location":"julia/jupyternotebook/#","page":"Jupyter Notebook (Accessing class materials)","title":"Jupyter Notebook (Accessing class materials)","text":"(Image: jupyer_notebook)","category":"page"},{"location":"julia/jupyternotebook/#","page":"Jupyter Notebook (Accessing class materials)","title":"Jupyter Notebook (Accessing class materials)","text":"To get started on the class, click on the first notebook entitled Linear Classification.ipynb.","category":"page"},{"location":"julia/jupyternotebook/#","page":"Jupyter Notebook (Accessing class materials)","title":"Jupyter Notebook (Accessing class materials)","text":"(Image: jupyer_notebook)","category":"page"},{"location":"julia/jupyternotebook/#Using-the-Default-Packages-in-a-Class-1","page":"Jupyter Notebook (Accessing class materials)","title":"Using the Default Packages in a Class","text":"","category":"section"},{"location":"julia/jupyternotebook/#","page":"Jupyter Notebook (Accessing class materials)","title":"Jupyter Notebook (Accessing class materials)","text":"The files Project.toml and Manifest.toml contain the information about versions of the default tutorial packages that we know work well. These packages can be activated by running the following code in any Jupyter notebook in the Teaching.jl-master folder:","category":"page"},{"location":"julia/jupyternotebook/#","page":"Jupyter Notebook (Accessing class materials)","title":"Jupyter Notebook (Accessing class materials)","text":"import Pkg\nPkg.activate(@__DIR__)\nPkg.instantiate()","category":"page"},{"location":"julia/jupyternotebook/#","page":"Jupyter Notebook (Accessing class materials)","title":"Jupyter Notebook (Accessing class materials)","text":"You will see this as the first code cell in all notebooks and you should add it to all the notebooks you create.","category":"page"},{"location":"julia/jump/#JuMP-1","page":"JuMP","title":"JuMP","text":"","category":"section"},{"location":"julia/jump/#","page":"JuMP","title":"JuMP","text":"JuMP é a biblioteca que usamos para resolver os problemas de otimização que escrevemos com a ajuda de um computador, JuMP não é a única biblioteca que faz isso, e nem Julia é a única linguagem com esse tipo de biblioteca.","category":"page"},{"location":"julia/jump/#","page":"JuMP","title":"JuMP","text":"Em Python: CVXPY","category":"page"},{"location":"julia/jump/#","page":"JuMP","title":"JuMP","text":"Existem inclusve linguagens e softwares criados unica e exclusivamente para isso:","category":"page"},{"location":"julia/jump/#","page":"JuMP","title":"JuMP","text":"GAMS\nAMPL","category":"page"},{"location":"julia/jump/#","page":"JuMP","title":"JuMP","text":"A melhor forma de descobrir as ferramentas oferecidas pela biblioteca é pela documentação","category":"page"},{"location":"julia/jump/#Basic-Example-1","page":"JuMP","title":"Basic Example","text":"","category":"section"},{"location":"julia/jump/#Formulation-1","page":"JuMP","title":"Formulation","text":"","category":"section"},{"location":"julia/jump/#","page":"JuMP","title":"JuMP","text":"Usaremos o exemplo da produção de berços e armários para mostrar as ferramentas básicas do JuMP, o modelo pode ser formulado da seguinte forma:","category":"page"},{"location":"julia/jump/#","page":"JuMP","title":"JuMP","text":"beginalign\n\nmax_x geq 0  sum 4x_1 + 3x_2\n\nmboxsa   nonumber \n 2x_1 + x_2 leq 4 \n x_1 + 2x_2 leq 4 \n\nendalign","category":"page"},{"location":"julia/jump/#Criando-e-resolvendo-o-modelo-1","page":"JuMP","title":"Criando e resolvendo o modelo","text":"","category":"section"},{"location":"julia/jump/#","page":"JuMP","title":"JuMP","text":"Para escrever o problema no JuMP deveremos usar as macros (funções que tem @ na frente) para definir variáveis (@variables), restrições (@constraint) e a função objetivo (@objective)","category":"page"},{"location":"julia/jump/#","page":"JuMP","title":"JuMP","text":"using JuMP, Clp\n\nmodel = Model(with_optimizer(Clp.Optimizer))\n\n@variable(model, x[i = 1:2] >= 0)\n\n@constraint(model, armarios, 2*x[1] + x[2] <= 4)\n@constraint(model, bercos, x[1] + 2*x[2] <= 4)\n\n@objective(model, Max, 4*x[1] + 3*x[2])\n\nJuMP.optimize!(model) \n\nJuMP.value.(x) \nJuMP.objective_value(model) ","category":"page"},{"location":"julia/plots/#Plots-1","page":"Plots","title":"Plots","text":"","category":"section"},{"location":"julia/plots/#","page":"Plots","title":"Plots","text":"There are several libraries to build plots in julia, we recommend using Plots.jl","category":"page"},{"location":"git/git/#Git-1","page":"Git","title":"Git","text":"","category":"section"},{"location":"git/git/#","page":"Git","title":"Git","text":"Where to learn:","category":"page"},{"location":"git/git/#","page":"Git","title":"Git","text":"A simple guide\nGit book","category":"page"}]
}
